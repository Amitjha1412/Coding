#include<cstdio>
#include<iostream>
#include<queue>
#include<vector>
using namespace std;
vector <int> a[21000];
int colorArr[21000];
#define M 1 
#define F (-1) 
#define U 0 
short int g[21000]; 
bool DFS(int r){
    bool res = true;
    for(int i = 0; i < adj[r].size(); i++){
        int v = adj[r][i];
        if(g[v] == g[r]) return false;
        if(g[v] == U){
            g[v] = -g[r];
            res = res and DFS(v);
        }
    }
    return res;
}

bool isBipartite(int src,int n)
{
    for(int i=0;i<=n;i++)
        colorArr[i]=-1;
    colorArr[src]=1;
    queue <int> q;
    q.push(src);
    while(!q.empty())
    {
        int u=q.front();
        q.pop();
        for(int j=0;j<a[u].size();j++)
        {
            int v=a[u][j];
            if(colorArr[v]==-1)
            {
                colorArr[v]=1-colorArr[u];
                q.push(v);
            }
            else if(colorArr[v]==colorArr[u])
                return false;
        }
    }
    return true;
}

int main()
{
    int t;
    scanf("%d",&t);
    for(int test=1;test<=t;test++)
    {
        int n,m;
        scanf("%d %d",&n,&m);
        for(int i=0;i<n;i++)
	{
		g[i] = U;
                a[i].clear();
	}
        while(m--)
        {
            int i,j;
            scanf("%d %d",&i,&j);
            a[i].push_back(j);
            a[j].push_back(i);
        }
        cout<<"Scenario #";
        printf("%d:\n",test);
	bool result = true;
        for(int i = 0; i < n; i++){
            if(g[i] == U){
                g[i] = M;
                result = result and DFS(i);
            }
        }
	if(result)
            printf("No suspicious bugs found!\n");
        else
            printf("Suspicious bugs found!\n");
        isBipartite(1,n)?cout<<"No suspicious bugs found!":cout<<"Suspicious bugs found!";
        cout<<endl;
    }
    return 0;
}
