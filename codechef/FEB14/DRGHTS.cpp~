#include<cstdio>
#include<iostream>
#include<vector>
using namespace std;
long long int c[50001]={0},ans1=0;
int ans2=0,p[50001],s[50001],a[50001],fin=0,tmp=0,flag1=0;
vector <int> node[50001];
        #define getchar getchar_unlocked
        #define putchar putchar_unlocked
int in()
{
        char c;
        while(c=getchar(),(c<'0'||c>'9')&&(c!='-'));
        bool flag=(c=='-');
        if(flag) c=getchar();
        int x=0;
        while(c>='0'&&c<='9') {
                x=x*10+c-48;
                c=getchar();
        }
        return flag?-x:x;
}
bool visited[50001];
void DFS(int v)
{
    visited[v]=1;
    if(a[v])
    {
        fin+=tmp;
        tmp=0;
        flag1=1;
    }
    else if(node[v].size()==1)
        flag1=0;
    for(int i=0;i< (int)node[v].size();i++)
    {
        if(!visited[node[v][i]])
        {
            tmp++;
            DFS(node[v][i]);
            if(!flag1 && tmp>0)
                tmp--;
        }
    }
}
int find(int x)
{
    if(p[x]==x)
        return x;
    return find(p[x]);
}
void make_union(int x,int y)
{
    int px=find(x);
    int py=find(y);
    if(s[x]>=s[y])
        p[py]=px;
    else
        p[px]=py;
}
int main()
{
    int n,m;
    scanf("%d %d",&n,&m);
    for(int i=1;i<=n;i++)
        a[i]=in();
    for(int i=1;i<=n;i++)
        p[i]=i,s[i]=1,c[i]=0;
    while(m--)
    {
        int i,j;
        i=in();
        j=in();
        node[i].push_back(j);
        node[j].push_back(i);
        make_union(i,j);
    }
    for(int i=1;i<=n;i++)
    {
        if(a[i]==1)
            c[find(i)]++;
    }
    for(int i=1;i<=n;i++)
    {
        if(c[i]>1)
            ans1+=(c[i]*(c[i]-1))/2;
    }
    for(int i = 1; i <=n; i++)
        visited[i] = false;
flag1=1;
    for(int i=1;i<=n;i++)
    {
        fin=0;
tmp=1;
            flag1=1;
        if(!visited[i] && a[i])
        {
            
            DFS(i);
            if(fin>1)
                ans2+=fin;
        }
    }
    printf("%lld %d\n",ans1,ans2);
    return 0;
}
