#include<stdio.h>
int p[10010001]={0};
public static int divisorCount(int n) {
    // a counter for the number of divisors
    // intially 1 (the multiplication identity)
    int count = 1;
 
    // save the square root to avoid re-computation
    int sqrt = (int)Math.sqrt(n);
 
    // loop through 2 and the odd numbers up to sqrt(n)
    for (int i = 2; i <= sqrt; i = (i == 2 ? 3 : i + 2)) {
 
        // a counter for the power of the
        // current number in the prime factorization
        int pow = 0;
 
        // while i is in n's prime factorization
        while (n % i == 0) {
            pow++;  // increment the power count
            n /= i; // remove one i from the prime factorization of n
        }
 
        // if there were any i's in n's prime factorization
        if (pow != 0) {
            // change the divisor count according to our formula
            count *= pow + 1;
 
            // recompute the square root, since we've changed n
            // (a little optimization)
            sqrt = (int)Math.sqrt(n);
        }
    }
 
    // if we've still not removed all factors from n,
    // then there is one prime factor left
    if (n != 1)
        // change the divisor count according to our formula
        // (the power of the last prime is 1)
        count *= 1 + 1;
 
    // return the number of divisors
    return count;
}
int main()
{
    int i,j;
    p[0]=p[1]=1;
    for(i=2;i*i<=1001000;i=(i==2 ? 3:i+2))
        if(p[i]==0)
            for(j=i*i;j<=1001000;j=j+i)
                p[j]=1;
    int t;
    long long int l,r,m,n;
    scanf("%d",&t);
    int ans=0;
    while(t--)
    {
        scanf("%lld %lld",&l,&r);
        for(;l<=r;l++)
        {
            if(l==1)
                continue;
            int count=divisorCount(l);
            if(p[count]==0)
                ans++;
        }
        printf("%d\n",ans);
    }
    return 0;
}
